class Solution {
    public int findCircleNum(int[][] isConnected) {

        //create adjacency list
        ArrayList<ArrayList<Integer>> adjLs = new ArrayList<ArrayList<Integer>>();
        int n = isConnected.length;
        for(int i = 0; i<n; i++){
            adjLs.add(new ArrayList<Integer>());
        }
        
        //convert matrix to list
        for(int i = 0; i<n; i++){
            for(int j = 0; j<n; j++){
                if (isConnected[i][j] == 1 && i != j ){
                    adjLs.get(i).add(j);
                    adjLs.get(j).add(i);
                }
            }
        }

        //dfs
        int vis[] = new int[n];
        int count = 0;
        for(int i = 0; i<n; i++){
            if(vis[i] == 0) {
                dfs(i, adjLs, vis);
                count++;
            }
        }
        return count;
    }

    private void dfs(int node, ArrayList<ArrayList<Integer>> adjLs, int[] vis) {
        vis[node] = 1;
        for(Integer it : adjLs.get(node)){
            if (vis[it] == 0){
                dfs(it, adjLs, vis);
            }
        }
    }
}